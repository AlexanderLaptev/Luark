%import common.WS

start: SHEBANG? chunk
chunk: block
block: statement* return_statement?

number: DECIMAL_INT | DECIMAL_FLOAT | HEX_INT | HEX_FLOAT
string: STRING | MULTISTRING
varargs: "..."

variable: ID
    | primary "." ID -> dot_access
    | primary "[" expression "]" -> table_access
var_list: variable ("," variable)*

table_constructor: "{" [_field_list] "}"
_field_list: field (("," | ";") field)* ("," | ";")?
?field: "[" expression "]" "=" expression -> expression_field
    | ID "=" expression -> name_field
    | expression

?expression: or_expression
?or_expression: and_expression
    | or_expression "or" and_expression
?and_expression: comparison_expression
    | and_expression "and" comparison_expression
?!comparison_expression: bitwise_or_expression
    | comparison_expression ("<" | ">" | "<=" | ">=" | "==" | "!=") bitwise_or_expression
?bitwise_or_expression: bitwise_xor_expression
    | bitwise_or_expression "|" bitwise_xor_expression
?bitwise_xor_expression: bitwise_and_expression
    | bitwise_xor_expression "~" bitwise_and_expression
?bitwise_and_expression: bitwise_shift_expression
    | bitwise_and_expression "&" bitwise_shift_expression
?bitwise_shift_expression: concat_expression
    | bitwise_shift_expression "<<" concat_expression -> lshift_expression
    | bitwise_shift_expression ">>" concat_expression -> rshift_expression
?concat_expression: add_expression
    | add_expression ".." concat_expression
?!add_expression: mul_expression
    | add_expression ("+" | "-") mul_expression
?!mul_expression: unary_expression
    | mul_expression ("*" | "/" | "//" | "%") unary_expression
?unary_expression: exp_expression
    | "-" unary_expression -> unary_minus
    | "not" unary_expression -> unary_not
    | "#" unary_expression -> unary_length
    | "~" unary_expression -> unary_bitwise_not
?exp_expression: literal
    | literal "^" unary_expression
?literal: primary
    | number
    | string
    | function_definition
    | table_constructor
    | "true" -> true
    | "false" -> false
    | "nil" -> nil
    | varargs
?primary.10: variable
    | function_call
    | "(" expression ")" -> parentheses
expression_list: expression ("," expression)*

?statement: ";" -> empty_statement
    | assignment_statement
    | local_assignment_statement
    | function_definition_statement
    | function_call -> function_call_statement
    | "do" block "end"
    | if_statement
    | "while" expression "do" block "end" -> while_statement
    | "repeat" block "until" expression -> repeat_statement
    | "break" -> break_statement
    | for_loop
    | "::" ID "::" -> label
    | "goto" ID -> goto_statement
return_statement: "return" expression_list? ";"?

assignment_statement: var_list "=" expression_list
local_assignment_statement: "local" attributed_name_list ["=" expression_list]
attributed_name_list: attributed_name ("," attributed_name)*
attributed_name: ID ["<" ID ">"]

function_call: primary function_call_parameters
    | primary ":" ID function_call_parameters -> method_call
function_call_parameters: "(" [expression_list] ")" | table_constructor | string

function_definition: "function" function_body
function_body: "(" [parameter_list] ")" block "end"
parameter_list: ID ("," ID)* ["," varargs] | varargs
function_definition_statement: "function" function_name function_body
    | "local" "function" ID function_body -> local_function_definition_statement
function_name: ID ("." ID)*
    | ID ("." ID)* ":" ID -> method_name

if_statement: "if" expression "then" block else_if* ["else" block] "end"
else_if: "elseif" expression "then" block

for_loop: "for" ID "=" expression "," expression ["," expression] "do" block "end" -> numeric_for_loop
    | "for" ID ("," ID)* "in" expression_list "do" block "end" -> generic_for_loop

ID: /[^\W\d]\w*/
SHEBANG: /^#(.*)/

COMMENT: /--.*/
LONG_COMMENT.10: /--\[(?P<lc>=*)\[.*?](?P=lc)]/s

STRING: /"(?:[^"\\]|\\.)*"|'(?:[^'\\]|\\.)*'/s
MULTISTRING: /\[(?P<ms>=*)\[.*?](?P=ms)]/s

DECIMAL_INT: /\d+(?:[eE][+-]?\d+)?/
DECIMAL_FLOAT: /(?:\d+\.\d*|\d*\.\d+)(?:[eE][+-]?\d+)?/
HEX_INT: /0[xX][\da-fA-F]+(?:[pP][+-]?[\da-fA-F]+)?/
HEX_FLOAT: /0[xX](?:[\da-fA-F]+\.[\da-fA-F]*|[\da-fA-F]*\.[\da-fA-F]+)(?:[pP][+-]?\d+)?/

%ignore WS
%ignore SHEBANG
%ignore COMMENT
%ignore LONG_COMMENT
