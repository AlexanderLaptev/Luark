%import common.WS

start: SHEBANG? chunk
chunk: block
block: statement* return_stmt?

number: DEC_INT -> dec_int
    | DEC_FLOAT -> dec_float
    | HEX_NUMBER -> hex_number
string: STRING -> string
    | MULTISTRING -> multistring
varargs: "..."

var: ID
    | primary "." ID -> dot_access
    | primary "[" expr "]" -> table_access
var_list: var ("," var)*

table_constructor: "{" [_field_list] "}"
_field_list: field (("," | ";") field)* ("," | ";")?
?field: "[" expr "]" "=" expr -> expr_field
    | ID "=" expr -> name_field
    | expr

?expr: or_expr
?or_expr: and_expr
    | or_expr "or" and_expr
?and_expr: comp_expr
    | and_expr "and" comp_expr
?comp_expr: bw_or_expr
    | comp_expr "<" bw_or_expr -> comp_lt
    | comp_expr ">" bw_or_expr -> comp_gt
    | comp_expr "<=" bw_or_expr -> comp_le
    | comp_expr ">=" bw_or_expr -> comp_ge
    | comp_expr "==" bw_or_expr -> comp_eq
    | comp_expr "~=" bw_or_expr -> comp_neq
?bw_or_expr: bw_xor_expr
    | bw_or_expr "|" bw_xor_expr
?bw_xor_expr: bw_and_expr
    | bw_xor_expr "~" bw_and_expr
?bw_and_expr: bw_shift_expr
    | bw_and_expr "&" bw_shift_expr
?bw_shift_expr: concat_expr
    | bw_shift_expr "<<" concat_expr -> lsh_expr
    | bw_shift_expr ">>" concat_expr -> rsh_expr
?concat_expr: add_expr
    | add_expr ".." concat_expr
?add_expr: mul_expr
    | add_expr "+" mul_expr -> add_expr
    | add_expr "-" mul_expr -> sub_expr
?mul_expr: unary_expr
    | mul_expr "*" unary_expr -> mul_expr
    | mul_expr "/" unary_expr -> div_expr
    | mul_expr "//" unary_expr -> fdiv_expr
    | mul_expr "%" unary_expr -> mod_expr
?unary_expr: exp_expr
    | "-" unary_expr -> unary_minus
    | "not" unary_expr -> unary_not
    | "#" unary_expr -> unary_length
    | "~" unary_expr -> unary_bw_not
?exp_expr: literal
    | literal "^" unary_expr
?literal: primary
    | number
    | string
    | func_def
    | table_constructor
    | "true" -> true
    | "false" -> false
    | "nil" -> nil
    | varargs
?primary.10: var
    | func_call
    | "(" expr ")" -> primary
expr_list: expr ("," expr)*

?statement: ";" -> empty_statement
    | assign_stmt
    | local_assign_stmt
    | func_def_stmt
    | func_call
    | "do" block "end"
    | if_stmt
    | "while" expr "do" block "end" -> while_stmt
    | "repeat" block "until" expr -> repeat_stmt
    | "break" -> break_stmt
    | for_loop
    | "::" ID "::" -> label
    | "goto" ID -> goto_stmt
return_stmt: "return" expr_list? ";"?

assign_stmt: var_list "=" expr_list
local_assign_stmt: "local" attrib_name_list ["=" expr_list]
attrib_name_list: attrib_name ("," attrib_name)*
attrib_name: ID ["<" ID ">"]

func_call: primary func_call_params
    | primary ":" ID func_call_params -> method_call
func_call_params: "(" [expr_list] ")" | table_constructor | string

func_def: "function" func_body
func_body: "(" [param_list] ")" block "end"
param_list: ID ("," ID)* ["," varargs] | varargs
func_def_stmt: "function" func_name func_body
    | "local" "function" ID func_body -> local_func_def_stmt
func_name: ID ("." ID)*
    | ID ("." ID)* ":" ID -> method_name

if_stmt: "if" expr "then" block else_if* ["else" block] "end"
else_if: "elseif" expr "then" block

for_loop: "for" ID "=" expr "," expr ["," expr] "do" block "end" -> for_loop_num
    | "for" ID ("," ID)* "in" expr_list "do" block "end" -> for_loop_gen

ID: /[^\W\d]\w*/
SHEBANG: /^#(.*)/

COMMENT: /--.*/
LONG_COMMENT.10: /--\[(?P<lc>=*)\[.*?](?P=lc)]/s

STRING: /"(?:[^"\\]|\\.)*"|'(?:[^'\\]|\\.)*'/s
MULTISTRING: /\[(?P<ms>=*)\[.*?](?P=ms)]/s

DEC_NUMBER: DEC_INT | DEC_FLOAT
DEC_INT: /\d+(?:[eE][+-]?\d+)?/
DEC_FLOAT: /(?:\d+\.\d*|\d*\.\d+)(?:[eE][+-]?\d+)?/
HEX_NUMBER: HEX_INT | HEX_FLOAT
HEX_INT: /0[xX][\da-fA-F]+(?:[pP][+-]?[\da-fA-F]+)?/
HEX_FLOAT: /0[xX](?:[\da-fA-F]+\.[\da-fA-F]*|[\da-fA-F]*\.[\da-fA-F]+)(?:[pP][+-]?\d+)?/

%ignore WS
%ignore COMMENT
%ignore LONG_COMMENT
